{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","monster","id","src","name","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","toLocaleLowerCase","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,kBAAaF,EAAMG,QAAQC,IAAMC,IAAG,+BAA0BL,EAAMG,QAAQC,GAAxC,4BAC5C,6BAAKJ,EAAMG,QAAQG,WCFdC,EAAW,SAAAP,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHlBM,G,MAAY,SAACV,GAAD,OACrB,uBACIC,UAAU,SACVU,KAAK,SACLC,YAAaZ,EAAMY,YACnBC,SAAWb,EAAMc,iBC0BVC,E,kDA7Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,qDAOd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,Y,oBAE/C,WAAU,IAAD,SAC2BE,KAAKR,MAA/BC,EADD,EACCA,YACFQ,EAFC,EACcjB,SACYkB,QAAO,SAAAvB,GAAO,OAC7CA,EAAQG,KAAKqB,cAAcC,SAASX,EAAYY,wBAClD,OACE,sBAAK5B,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,cAAC,EAAD,CACEW,YAAY,kBACZE,aAAc,SAAAgB,GAAC,OAAI,EAAKP,SAAS,CAAEN,YAAaa,EAAEC,OAAOC,WAE3D,cAAC,EAAD,CAAUxB,SAAUiB,W,GAxBVQ,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cc21980e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt={`monster-${props.monster.id}`} src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2>{props.monster.name}</h2>\r\n    </div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster =>\r\n            <Card key={monster.id} monster={monster} />)}\r\n    </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => (\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder={props.placeholder}\r\n        onChange= {props.handleChange}>\r\n    </input>\r\n);","import './App.css';\nimport { Component } from 'react';\nimport { CardList } from './component/card-list/card-list.component';\nimport { SearchBox } from './component/search-box/search-box.component';\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json()\n        .then(users => this.setState({ monsters: users })));\n  }\n  render() {\n    const { searchField, monsters } = this.state;\n    const filteredMonster = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1 className='app-title'>Monster's Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monsters'\n          handleChange={e => this.setState({ searchField: e.target.value })}\n        />\n        <CardList monsters={filteredMonster} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}